import Head from 'next/head'
import { GetServerSideProps } from 'next'
import { getProducts } from '../lib/products'
import { Product, Room } from '@prisma/client'
import { MagnifyingGlass } from 'phosphor-react'
import { getRooms } from '@/lib/rooms'
import { useEffect, useState } from 'react'

import { api } from '@/services/api'
import { Flip, toast } from 'react-toastify'
import { useRouter } from 'next/router'
import Nav from '@/components/nav'
import { useUser } from '@auth0/nextjs-auth0/client'
import { getSession } from '@auth0/nextjs-auth0'
import deleteProductButton from '@/components/deleteProductButton'
import DeleteProductButton from '@/components/deleteProductButton'

type ProductsProps = {
  products: Product[]
  rooms: Room[]
  isAdmin: boolean
}

export default function Home({ products, rooms, isAdmin }: ProductsProps) {

  const { user, isLoading } = useUser()
  const [deletingProductId, setDeletingProductId] = useState('')
  const [selectedRoom, setSelectedRoom] = useState<string>('0');
  const [selectedProducts, setSelectedProducts] = useState<Product[]>(products);
  const [searchProduct, setSearchProduct] = useState<string>('');
  const router = useRouter();

  useEffect(() => {
    let filteredProducts = products

    if (selectedRoom !== '0') {
      filteredProducts = filteredProducts.filter(
        product => product.room_id === selectedRoom
      );
    }

    if (searchProduct !== '') {
      filteredProducts = filteredProducts.filter(
        product => product.name.toLowerCase().indexOf(searchProduct.toLowerCase()) > -1
      )
    }

    setSelectedProducts(filteredProducts);
    setDeletingProductId('');

  }, [selectedRoom, searchProduct, products])

  if (isLoading) return <h1>Loading...</h1>

  return (
    <>
      <Head>
        <title>BellWell</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='container bg-zinc-50'>
        <header className='p-4 bg-zinc-100'>
          <Nav pageNow={router.asPath} isAdmin={isAdmin} rooms={rooms} />
          <div className='flex items-center justify-between'>

          </div>
          <div className="w-full my-4">
            <form>
              <div className="flex">
                <select
                  className="py-1 px-1 text-sm font-medium text-gray-900 bg-gray-50 rounded-l-xl border-2 border-gray-300 focus:border-slate-900 focus:outline-none"
                  onChange={e => setSelectedRoom(e.target.value)}
                  value={selectedRoom}
                >
                  <option selected value='0'>Comodos</option>
                  {rooms.map(room => {
                    return (
                      <option
                        key={room.id}
                        value={room.id}
                      >
                        {room.name}
                      </option>
                    )
                  })}
                </select>
                <div className="relative w-full">
                  <input
                    type="search"
                    className="block p-2.5 w-full z-20 text-sm font-medium text-gray-900 bg-gray-50 rounded-r-xl border-2 border-gray-300 focus:border-gray-900 focus:outline-none"
                    placeholder="Procurar produtos..."
                    value={searchProduct}
                    onChange={e => setSearchProduct(e.target.value)}
                  />
                  <button
                    type="submit"
                    className="absolute top-[2px] right-[1px] p-[9px] text-sm font-medium text-white bg-emerald-600 rounded-r-xl border border-gray-300 focus:outline-none">
                    <MagnifyingGlass className='w-5 h-5' />
                    <span className="sr-only">Search</span>
                  </button>
                </div>
              </div>
            </form>
          </div>
        </header>

        <main className='grid grid-cols-12 gap-3 mt-5'>

          {selectedProducts.map(product => {
            return (
              <div key={product.id} className={`col-span-12 flex justify-center ${deletingProductId === product.id ? "opacity-40" : ""}`}>
                <div className='w-[80%] border border-gray-200 rounded-lg shadow p-2'>
                  <img src={product.image_url} alt={`Imagem do produto ${product.name}`} className='shadow-lg' />

                  <h3 className='font-bold text-lg mt-4'>{product.name}</h3>

                  <p className='font-light text-sm'>Este item pode ser adquirido no {product.description}</p>
                  <div className={`${user && isAdmin ? "w-full my-4 flex justify-between" : "w-full my-4 text-center"}`}>
                    <a href={product.link} rel="noopener noreferrer" target="_blank" className='bg-emerald-600 h-10 p-2 rounded-lg text-white'>Compre agora</a>
                    {user && isAdmin ? (
                      <DeleteProductButton id={product.id} setDeletingProductId={setDeletingProductId} />
                    ) : (<></>)}
                  </div>
                </div>
              </div>
            )
          })}
        </main>
      </div >

    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (context) => {

  const products = await getProducts()
  const rooms = await getRooms()

  const session = await getSession(context.req, context.res);

  if (!session?.user['https://bellwell.vercel.app/roles']?.includes('admin')) {
    return {
      props: {
        isAdmin: false,
        products,
        rooms
      }
    };
  } else {
    return {
      props: {
        isAdmin: true,
        products,
        rooms
      },
    };
  }
}